package main

import (
    "fmt"
    "slices"
)

func main() {
    // Uninitialized slice
    var s []string
    fmt.Println("uninit:", s, s == nil, len(s) == 0) // Output: uninit: [] true true

    // Create an empty slice with make
    s = make([]string, 3)
    fmt.Println("emp:", s, "len:", len(s), "cap:", cap(s)) // Output: emp: [  ] len: 3 cap: 3

    // Set and get values
    s[0] = "a"
    s[1] = "b"
    s[2] = "c"
    fmt.Println("set:", s)       // Output: set: [a b c]
    fmt.Println("get:", s[2])    // Output: get: c
    fmt.Println("len:", len(s))  // Output: len: 3

    // Append values to slice
    s = append(s, "d")
    s = append(s, "e", "f")
    fmt.Println("apd:", s)       // Output: apd: [a b c d e f]

    // Copy slices
    c := make([]string, len(s))
    copy(c, s)
    fmt.Println("cpy:", c)       // Output: cpy: [a b c d e f]

    // Slice operations
    l := s[2:5]
    fmt.Println("sl1:", l)       // Output: sl1: [c d e]

    l = s[:5]
    fmt.Println("sl2:", l)       // Output: sl2: [a b c d e]

    l = s[2:]
    fmt.Println("sl3:", l)       // Output: sl3: [c d e f]

    // Declare and initialize a slice in one line
    t := []string{"g", "h", "i"}
    fmt.Println("dcl:", t)       // Output: dcl: [g h i]

    // Use slices package to compare slices
    t2 := []string{"g", "h", "i"}
    if slices.Equal(t, t2) {
        fmt.Println("t == t2")   // Output: t == t2
    }

    // Multi-dimensional slice
    twoD := make([][]int, 3)
    for i := 0; i < 3; i++ {
        innerLen := i + 1
        twoD[i] = make([]int, innerLen)
        for j := 0; j < innerLen; j++ {
            twoD[i][j] = i + j
        }
    }
    fmt.Println("2d: ", twoD)    // Output: 2d:  [[0] [1 2] [2 3 4]]
}
